
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.3     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.0
✔ ggplot2   3.4.4     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.0
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> library(vroom)

Attaching package: ‘vroom’

The following objects are masked from ‘package:readr’:

    as.col_spec, col_character, col_date, col_datetime, col_double,
    col_factor, col_guess, col_integer, col_logical, col_number,
    col_skip, col_time, cols, cols_condense, cols_only, date_names,
    date_names_lang, date_names_langs, default_locale, fwf_cols,
    fwf_empty, fwf_positions, fwf_widths, locale, output_column,
    problems, spec

> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──
✔ broom        1.0.5     ✔ rsample      1.2.0
✔ dials        1.2.0     ✔ tune         1.1.2
✔ infer        1.0.5     ✔ workflows    1.1.3
✔ modeldata    1.2.0     ✔ workflowsets 1.0.1
✔ parsnip      1.1.1     ✔ yardstick    1.2.0
✔ recipes      1.0.8     
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ scales::discard() masks purrr::discard()
✖ dplyr::filter()   masks stats::filter()
✖ recipes::fixed()  masks stringr::fixed()
✖ dplyr::lag()      masks stats::lag()
✖ yardstick::spec() masks vroom::spec(), readr::spec()
✖ recipes::step()   masks stats::step()
• Use suppressPackageStartupMessages() to eliminate package startup messages
> library(embed)
> library(discrim)

Attaching package: ‘discrim’

The following object is masked from ‘package:dials’:

    smoothness

> library(naivebayes)
naivebayes 0.9.7 loaded
> library(kknn)
> library(kernlab)

Attaching package: ‘kernlab’

The following object is masked from ‘package:scales’:

    alpha

The following object is masked from ‘package:purrr’:

    cross

The following object is masked from ‘package:ggplot2’:

    alpha

> library(themis)
> library(nnet)
> 
> train <- vroom("train.csv")
Rows: 371 Columns: 7
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (2): color, type
dbl (5): id, bone_length, rotting_flesh, hair_length, has_soul

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> # train <- train %>%
> #   select(-c("id"))
> test <- vroom("test.csv")
Rows: 529 Columns: 6
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (1): color
dbl (5): id, bone_length, rotting_flesh, hair_length, has_soul

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> nn_recipe <- recipe(type ~ ., data=train) %>%
+   update_role(id, new_role="id") %>%
+   step_lencode_glm(color, outcome = vars(type)) %>%
+   step_dummy(all_nominal_predictors()) %>%
+   step_range(all_numeric_predictors(), min=0, max=1) #scale to [0,1]
> 
> prep <- prep(nn_recipe)
> baked_train <- bake(prep, new_data = train)
> 
> nn_model <- mlp(hidden_units = tune(),
+                 epochs = 50,
+                 activation = "relu") %>%
+   set_engine("keras", verbose=0) %>% #verbose = 0 prints off less
+   set_mode("classification")
> 
> nn_wf <- workflow() %>%
+   add_recipe(nn_recipe) %>%
+   add_model(nn_model)
> 
> nn_tuneGrid <- grid_regular(hidden_units(range=c(1, 100)),
+                             levels=3)
> 
> folds <- vfold_cv(train, v = 3, repeats=1)
> 
> tuned_nn <- nn_wf %>%
+   tune_grid(resamples=folds,
+             grid=nn_tuneGrid,
+             metrics=metric_set(accuracy))
2023-11-06 14:31:29.947191: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-11-06 14:31:32.549889: I tensorflow/core/common_runtime/process_util.cc:146] Creating new thread pool with default inter op setting: 2. Tune using inter_op_parallelism_threads for best performance.
1/4 [======>.......................] - ETA: 0s4/4 [==============================] - 0s 14ms/step
1/4 [======>.......................] - ETA: 0s3/4 [=====================>........] - ETA: 0s4/4 [==============================] - 0s 18ms/step
1/4 [======>.......................] - ETA: 0s4/4 [==============================] - 0s 11ms/step
1/4 [======>.......................] - ETA: 0s4/4 [==============================] - 0s 13ms/step
1/4 [======>.......................] - ETA: 0s4/4 [==============================] - 0s 2ms/step
1/4 [======>.......................] - ETA: 0s4/4 [==============================] - 0s 8ms/step
1/4 [======>.......................] - ETA: 0s4/4 [==============================] - 0s 14ms/step
1/4 [======>.......................] - ETA: 0s4/4 [==============================] - 0s 11ms/step
1/4 [======>.......................] - ETA: 0s4/4 [==============================] - 0s 10ms/step
> 
> tuned_nn %>% collect_metrics() %>%
+   filter(.metric=="accuracy") %>%
+   ggplot(aes(x=hidden_units, y=mean)) + geom_line()
> 
> # Predict
> bestTune <- tuned_nn %>%
+   select_best("accuracy")
> 
> # Finalize workflow and predict
> final_wf <- nn_wf %>%
+   finalize_workflow(bestTune) %>%
+   fit(data=train)
> 
> ggg_predictions <- predict(final_wf, new_data = test, type="class")
 1/17 [>.............................] - ETA: 0s 9/17 [==============>...............] - ETA: 0s17/17 [==============================] - 0s 4ms/step
> 
> ggg_predictions$type <- ggg_predictions$.pred_class
> ggg_predictions$id <- test$id
> ggg_final <- ggg_predictions %>%
+   select(id, type)
> 
> write.csv(ggg_final, "nn.csv", row.names = F)
> 
> proc.time()
   user  system elapsed 
555.761 889.846  44.393 
